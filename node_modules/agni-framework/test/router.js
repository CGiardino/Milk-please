/**
 * Module dependencies
 */

var should = require('should');
var sinon = require('sinon');
var path = require('path');
var Router = require('../lib/router');
var util = require('util');

/**
 * Tests
 */

describe('Router', function() {
  var appDir = path.join(__dirname, 'test', 'testdir');

  var app = {
    get: function(key) {
      switch(key) {
        case 'appDir':
          return appDir;
          break;

        case 'defaultController':
          return 'home';
          break;
      }
    }
  }
  var controllers = {
    '/home': {
      read: function() {
        this.res.send();
      },
      foo: function() {
        this.res.send();
      },
      baz: function(arg1) {
        this.res.send();
      },
      camelCase: function() {
        this.res.send();
      }
    },
    '/home/baz': {
      bar: function() {
        this.res.send();
      }
    },
    '/foo/foo2': {
      bar: function() {
        this.res.send();
      }
    },
    '/crud': {
      read: function(id) {
        this.res.send();
      },
      create: function() {
        this.res.send();
      },
      update: function(id) {
        this.res.send();
      },
      del: function(id) {
        this.res.send();
      },
      add: function(id) {
        this.res.send();
      },
      edit: function(id) {
        this.res.send();
      }
    },
    '/noncrud': {
      resource: false,
      read: function(id) {
        this.res.send();
      },
      create: function() {
        this.res.send();
      },
      update: function(id) {
        this.res.send();
      },
      del: function(id) {
        this.res.send();
      }
    }
  }
  
  beforeEach(function() {
    this.req = this.res = {}
    this.router = new Router(app, controllers);
  });
  
  describe('.handle()', function() {
    it('should call /home.foo()', function(done) {
      this.req.path = '/home/foo';
      var spy = sinon.spy(controllers['/home'], 'foo');
      this.res = {
        send: function() {
          spy.called.should.be.ok;
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should call /foo/foo2.bar()', function(done) {
      this.req.path = '/foo/foo2/bar';
      var spy = sinon.spy(controllers['/foo/foo2'], 'bar');
      this.res = {
        send: function() {
          spy.called.should.be.ok;
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should call /home.read()', function(done) {
      this.req.path = '/home';
      this.req.method = 'GET';
      var spy = sinon.spy(controllers['/home'], 'read');
      this.res = {
        send: function() {
          spy.called.should.be.ok;
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should call /home.read() as default', function(done) {
      this.req.path = '/';
      this.req.method = 'GET';
      var spy = sinon.spy(controllers['/home'], 'read');
      this.res = {
        send: function() {
          spy.called.should.be.ok;
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should call next(code:404) if controller does not exist', function(done) {
      this.req.path = '/fsdf/hgd';
      var next = function(err) {
        err['code'].should.equal(404);
        
        done();
      }
      
      this.router.handle(this.req, this.res, next);
    })
    
    it('should call /home.foo() with 2 arguments', function(done) {
      this.req.path = '/home/foo/x/y';
      var spy = sinon.spy(controllers['/home'], 'foo');
      this.res = {
        send: function() {
          spy.called.should.be.ok;
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should call /home.read() with 2 arguments', function(done) {
      this.req.path = '/home/x/y';
      this.req.method = 'GET';
      var spy = sinon.spy(controllers['/home'], 'read');
      this.res = {
        send: function() {
          spy.called.should.be.ok;
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should call /home.camelCase()', function(done) {
      this.req.path = '/home/camel-case';
      var spy = sinon.spy(controllers['/home'], 'camelCase');
      this.res = {
        send: function() {
          spy.called.should.be.ok;
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should call /home/baz(bar) instead of /home.baz.bar()', function(done) {
      this.req.path = '/home/baz/bar';
      var failSpy = sinon.spy(controllers['/home/baz'], 'bar');
      var spy = sinon.spy(controllers['/home'], 'baz');
      this.res = {
        send: function() {
          spy.called.should.be.ok;
          failSpy.called.should.not.be.ok;
          
          spy.restore();
          failSpy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should map POST to create (no arguments)', function(done) {
      this.req.path = '/crud';
      this.req.method = 'POST';
      var spy = sinon.spy(controllers['/crud'], 'create');
      this.res = {
        send: function() {
          spy.called.should.be.ok;
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should map GET to read (with argument)', function(done) {
      this.req.path = '/crud/1';
      this.req.method = 'GET';
      var spy = sinon.spy(controllers['/crud'], 'read');
      this.res = {
        send: function() {
          should.ok(spy.calledWithExactly('1'));
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should map PUT to update (with argument)', function(done) {
      this.req.path = '/crud/1';
      this.req.method = 'PUT';
      var spy = sinon.spy(controllers['/crud'], 'update');
      this.res = {
        send: function() {
          should.ok(spy.calledWithExactly('1'));
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should map DELETE to del (with argument)', function(done) {
      this.req.path = '/crud/1';
      this.req.method = 'DELETE';
      var spy = sinon.spy(controllers['/crud'], 'del');
      this.res = {
        send: function() {
          should.ok(spy.calledWithExactly('1'));
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should map GET edit to edit (with argument)', function(done) {
      this.req.path = '/crud/edit/1';
      this.req.method = 'GET';
      var spy = sinon.spy(controllers['/crud'], 'edit');
      this.res = {
        send: function() {
          should.ok(spy.calledWithExactly('1'));
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should map GET add to add (without argument)', function(done) {
      this.req.path = '/crud/add';
      this.req.method = 'GET';
      var spy = sinon.spy(controllers['/crud'], 'add');
      this.res = {
        send: function() {
          spy.called.should.be.ok;
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      this.router.handle(this.req, this.res);
    });
    
    it('should not map POST to create is resource is false', function(done) {
      this.req.path = '/noncrud';
      this.req.method = 'POST';
      var spy = sinon.spy(controllers['/noncrud'], 'create');
      this.res = {
        send: function() {
          spy.called.should.not.be.ok;
          
          spy.restore();
          done();
        },
        status: function() {}
      }
      
      var next = function(err) {
        err['code'].should.equal(404);
        
        done();
      }
      
      this.router.handle(this.req, this.res, next);
    });
  });
});