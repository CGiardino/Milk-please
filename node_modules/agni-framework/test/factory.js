/**
 * Module dependencies
 */

var should = require('should');
var util = require('util');
var path = require('path');
var Factory = require('../lib/factory');

/**
 * Tests
 */

describe('Factory', function() {
  var appDir = path.join(__dirname, 'testdir');
  var app = {
    get: function(key) {
      switch(key) {
        case 'appDir':
          return appDir
          break;
      }
    },
    settings: {key: 'value'}
  }
  
  beforeEach(function() {
    this.factory = new Factory(app);
  });
  
  describe('.getModel()', function() {
    it('should call a function exported in the model', function(done) {      
      this.factory.getModel('foo').getFoo(function(value) {
        value.should.equal('foo');
        done();
      });
    });
  });
  
  it('should call a model prototype function', function(done) {
    var Sum = this.factory.getModel('sum');
    var sum = new Sum(1, 2);
    sum.get(function(value) {
        value.should.equal(3);
        done();
      });
  });
  
  describe('.getService()', function() {
    it('should call a function exported in the service', function(done) {
      this.factory.getService('foo').getFoo(function(value) {
        value.should.equal('foo');
        done();
      });
    });
    
    it('should call a service prototype function', function(done) {
      var S = this.factory.getService('sum')
      var s = new S(2, 3);
      s.get(function(value) {
        value.should.equal(5);
        done();
      });
    });
  });
  
  describe('service.service()', function() {
    it('should call a service from the exported function of a service', function(done) {
      this.factory.getService('foo').getBaz(function(value) {
        value.should.equal('baz');
        done();
      });
    });
    
    it('should call a service from a service prototype function', function(done) {
      var S = this.factory.getService('sum');
      var s = new S(2, 3);
      s.getBaz(function(value) {
        value.should.equal('baz');
        done();
      });
    });
  });
  
  describe('service.construct()', function() {
    it('should construct service', function(done) {
      this.factory.getService('sum')
        .construct(2, 3)
        .get(function(value) {
          value.should.equal(5);
          done();
        });
    });
  });
  
  describe('service.settings', function() {
    it('should read setting from service prototype function', function(done) {
      var Sum = this.factory.getService('sum');
      var sum = new Sum(1, 2);
      sum.getSetting(function(value) {
        value.should.equal('value');
        done();
      });
    });
  });
  
  describe('service.settings', function() {
    it('should read setting from an exported service function', function(done) {
      this.factory.getService('foo').getSetting(function(value) {
        value.should.equal('value');
        done();
      });
    });
  });
  
  describe('model.settings', function() {
    it('should read setting from model prototype function', function(done) {
      var Sum = this.factory.getModel('sum');
      var sum = new Sum(1, 2);
      sum.getSetting(function(value) {
        value.should.equal('value');
        done();
      });
    });
  });
  
  describe('model.settings', function() {
    it('should read setting from an exported model function', function(done) {
      this.factory.getModel('foo').getSetting(function(value) {
        value.should.equal('value');
        done();
      });
    });
  });
});