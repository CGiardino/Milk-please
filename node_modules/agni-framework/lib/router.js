/**
 * Module dependencies
 */

var S = require('string');
var Controller = require('./controller');

/**
 * Router constructor
 * 
 * @param {Object} Application instance
 * @param {Object} Controller list
 * 
 * @api public
 */

function Router(app, controllerList) {
  this.app = app;
  this.controllers = controllerList;
  this.req = null;
  this.res = null;
  this.segments = null;
  this.i = null;
}

/**
 * Execute the controller which corresponds to this path
 * 
 * @param {Object} Request object
 * @param {Object} Response object
 * @param {Function} Next
 * 
 * @api public
 */

Router.prototype.handle = function(req, res, next) {
  this.req = req;
  this.res = res;
  this.next = next;
  
  var reqURL = req.path;
  
  //Route '/' to home
  if(reqURL === '/' || reqURL === '') {
    reqURL = '/' + this.app.get('defaultController');
  }
  
  this.segments = reqURL.split('/');
  
  for(this.i = 1; this.i < this.segments.length; this.i++) {
    //Controller
    var controllerName = this.segments.slice(0, (this.i + 1)).join('/');
    
    //Function
    var functionName = false;
    if(this.i < (this.segments.length - 1)) {
      functionName = this.segments[this.i + 1];
    }
    
    if(this._applyRouteIfExists(controllerName, functionName)) {
      return true;
    }
  }
  
  next({code: 404, url: reqURL, message: 'Not Found'});
}

Router.prototype._applyRouteIfExists = function(controllerName, functionName) {
  if(this.controllers.hasOwnProperty(controllerName)) {
    var controller = this.controllers[controllerName];
  } else {
    return false;
  }
  
  var fn;
  var args = this.segments.slice(this.i + 1);
  
  var functionExists = false;
  if(functionName) {
    functionName = S(functionName).camelize().s;
    functionExists = (functionName in controller);
  }
  
  var isResource = false;
  if(! functionExists) {
    isResource = ! (('resource' in controller)
      && (controller.resource === false));
  }
  
  if(isResource) {
    //Handle CRUD actions
    fn = this._getResourcefulFunction(controller);
  } else {
    //Handle other actions
    fn = this._getRegularFunction(controller, functionName);
    args.shift();
  }
  
  if(fn !== false) {
    var controller = new Controller(this.app, this.req, this.res, this.next, controllerName);
    fn.apply(controller, args);
    return true;
  } else {
    return false;
  }
}

Router.prototype._getResourcefulFunction = function(cntrl) {
  var CRUD = {
    GET: 'read',
    POST: 'create',
    PUT: 'update',
    DELETE: 'del'
  }
  
  var action = CRUD[this.req.method];
  
  if(! action) {
    return false;
  }
  
  var fnExists = (cntrl.hasOwnProperty(action) &&
    (typeof cntrl[action]) === 'function');
  if(fnExists) {
    return cntrl[action];
  } else {
    return false;
  }
}

Router.prototype._getRegularFunction = function(cntrl, functionName) {
  var fnExists = (cntrl.hasOwnProperty(functionName) &&
    (typeof cntrl[functionName]) === 'function');
  if(fnExists) {
    return cntrl[functionName];
  } else {
    return false;
  }
}

module.exports = Router;