/**
 * Module dependencies
 */

var h = require('./helpers');
var Factory = require('./factory');

/**
 * Controller constructor
 * 
 * @param {Object} Application instance
 * @param {Object} Request object
 * @param {Object} Response object
 * @param {Function} Middleware `next` function
 * @param {String} Controller module name
 * 
 * @api public
 */

function Controller(app, req, res, next, path) {
  this._path = path;
  this._factory = new Factory(app);
  this.req = req;
  this.res = res;
  this.next = next;
  this.settings = app.settings;
  this.cookies = this.COOKIES = req.cookies;
  this.session = this.SESS = this.SESSION = req.session;
  this.query = this.GET = req.query;
  this.body = this.POST = req.body;
  
  //Add empty params object to request
  if(this.req.hasOwnProperty('params') === false) {
    this.req.params = {}
  }
}

/**
 * Render a view
 * 
 * @param {String|Object|Function} View name, locals or callback (depends on arg num)
 * @param {Object|Function} Locals or callback
 * @param {Function} Callback
 * 
 * @api public
 */

Controller.prototype.render = function(view, locals, callback) {
  if((typeof view) === 'object') {
    callback = locals;
    locals = view;
    view = '';
  } else if((typeof view) === 'function') {
    callback = view;
    locals = {}
    view = '';
  }
  
  if(! view) {
    view = h.ltrimSlash(this._path);
  }
  
  if(! locals) {
    locals = {}
  }
  
  locals['agni'] = {
    service: this.service,
    model: this.model
  };
  
  this.res.render(view, locals, callback);
}

/**
 * Service factory
 * 
 * @param {String} Service name
 * 
 * @api public
 */

Controller.prototype.service = function(name) {
  if(! name) {
    name = h.ltrimSlash(this._path);
  }
  
  return this._factory.getService(name);
}

/**
 * Model factory
 * 
 * @param {String} Model name
 * 
 * @api public
 */

Controller.prototype.model = function(name) {
  if(! name) {
    name = h.ltrimSlash(this._path);
  }
  
  return this._factory.getModel(name);
}

module.exports = Controller;